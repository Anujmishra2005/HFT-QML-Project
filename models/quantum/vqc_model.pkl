import pennylane as qml
from pennylane import numpy as np
import joblib
import os

MODEL_PATH = "models/quantum/vqc_model.pkl"

# Define device
dev = qml.device("default.qubit", wires=4)

def variational_circuit(params, x=None):
    # Encode input using angle encoding
    for i in range(len(x)):
        qml.RY(x[i], wires=i)
    # Variational layer
    qml.StronglyEntanglingLayers(params, wires=range(4))
    return qml.expval(qml.PauliZ(0))

@qml.qnode(dev)
def vqc_node(params, x):
    return variational_circuit(params, x)

def vqc_predict(params, X):
    preds = []
    for x in X:
        val = vqc_node(params, x)
        preds.append(1 if val > 0 else -1)
    return np.array(preds)

def train_vqc(X, y, steps=50, lr=0.1):
    # Initialize parameters
    params = np.random.normal(0, np.pi, (1, 4, 3), requires_grad=True)
    opt = qml.AdamOptimizer(lr)

    def cost(params):
        preds = [vqc_node(params, x) for x in X]
        loss = np.mean((preds - y) ** 2)
        return loss

    for i in range(steps):
        params, curr_cost = opt.step_and_cost(cost, params)
        if i % 10 == 0:
            print(f"Step {i}: cost={curr_cost:.4f}")

    os.makedirs("models/quantum", exist_ok=True)
    joblib.dump(params, MODEL_PATH)
    print(f"VQC model saved at {MODEL_PATH}")
    return params

def load_vqc():
    if not os.path.exists(MODEL_PATH):
        raise FileNotFoundError(f"{MODEL_PATH} not found, train model first.")
    params = joblib.load(MODEL_PATH)
    return params
